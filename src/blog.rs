// this module was auto-generated by build.rs
use crate::{
    config::NAV,
    handlers::{four_oh_four, html_str_handler, HandlerResult},
    types::Hyperlink,
};
use askama::Template;
use lazy_static::lazy_static;

#[derive(Debug, Clone, Copy)]
pub struct LinkInfo {
    pub id: usize,
    pub url_name: &'static str,
    pub title: &'static str,
}

#[derive(Debug, Default)]
pub struct BlogLinkInfo {
    pub drafts: Vec<LinkInfo>,
    pub published: Vec<LinkInfo>,
}

lazy_static! {
    pub static ref LINKINFO: BlogLinkInfo = {
        let mut ret = BlogLinkInfo::default();
        ret.drafts.push(LinkInfo {
            id: 18,
            title: "I Scrapped My Stencil Project And Wrote A Static Site Instead",
            url_name: "deciduously-com",
        });
        ret.published.push(LinkInfo {
            id: 0,
            title: "The Trials and Tribulations of actix-web and the OSS community",
            url_name: "actix-trials",
        });
        ret.published.push(LinkInfo {
            id: 1,
            title: "That About Wraps It Up For Actix-Web",
            url_name: "actix-wrap",
        });
        ret.published.push(LinkInfo {
            id: 2,
            title: "Solving Problems By Avoiding Them",
            url_name: "avoiding-problems",
        });
        ret.published.push(LinkInfo {
            id: 3,
            title: "Back to school",
            url_name: "back-to-school",
        });
        ret.published.push(LinkInfo {
            id: 4,
            title: "Overly Functional C++: The BenFolds Five",
            url_name: "ben-folds-five",
        });
        ret.published.push(LinkInfo {
            id: 5,
            title: "Ben++",
            url_name: "ben-plus-plus",
        });
        ret.published.push(LinkInfo {
            id: 6,
            title: " Interesting Board Game Mechanics",
            url_name: "board-game-mechanics",
        });
        ret.published.push(LinkInfo {
            id: 7,
            title: "The Builder Pattern",
            url_name: "builder-pattern",
        });
        ret.published.push(LinkInfo {
            id: 8,
            title: "Callbacks, Trait Objects & Associated Types, Oh My!",
            url_name: "callbacks-trait-objects-associated-types",
        });
        ret.published.push(LinkInfo {
            id: 9,
            title: "Reactive Canvas with ClojureScript and Vue",
            url_name: "canvas-cljs-vue",
        });
        ret.published.push(LinkInfo {
            id: 10,
            title: "Reactive Canvas with TypeScript and Vue",
            url_name: "canvas-ts-vue",
        });
        ret.published.push(LinkInfo {
            id: 11,
            title: "A ClojureScript exercise template",
            url_name: "cljs-exercise",
        });
        ret.published.push(LinkInfo {
            id: 12,
            title: "Create Graphviz graphs in Clojure with dorothy",
            url_name: "clojure-dorothy",
        });
        ret.published.push(LinkInfo {
            id: 13,
            title: "Up and Running with Clojure for the Web",
            url_name: "clojure-web",
        });
        ret.published.push(LinkInfo {
            id: 14,
            title: "C++ Template Specialization - Syntax Note",
            url_name: "cpp-template-specialization",
        });
        ret.published.push(LinkInfo {
            id: 15,
            title: "Crates I Have Known And Loved",
            url_name: "crates-known-loved",
        });
        ret.published.push(LinkInfo {
            id: 16,
            title: "Creative Coding in Rust with Nannou",
            url_name: "creative-coding-nannou",
        });
        ret.published.push(LinkInfo {
            id: 17,
            title: "Getting Cozy With Debian Buster",
            url_name: "debian-buster",
        });
        ret.published.push(LinkInfo {
            id: 19,
            title: "deciduously",
            url_name: "deciduously",
        });
        ret.published.push(LinkInfo {
            id: 20,
            title: "Scrape your Dev.to pageviews with Rust",
            url_name: "dev-to-scrape-rust",
        });
        ret.published.push(LinkInfo {
            id: 21,
            title: "The Dumb Things I Did And How I'm Going To Fix Them",
            url_name: "dumb-things-i-did",
        });
        ret.published.push(LinkInfo {
            id: 22,
            title: "Know When to Fold 'Em",
            url_name: "fold-em",
        });
        ret.published.push(LinkInfo {
            id: 23,
            title: "FormData in TypeScript",
            url_name: "formdata-ts",
        });
        ret.published.push(LinkInfo {
            id: 24,
            title: "Setting Up A Fresh Ruby Project",
            url_name: "fresh-ruby-project",
        });
        ret.published.push(LinkInfo {
            id: 25,
            title: "F# is Pretty Cool",
            url_name: "fsharp-pretty-cool",
        });
        ret.published.push(LinkInfo {
            id: 26,
            title: "Get Started Writing Scheme",
            url_name: "get-started-writing-scheme",
        });
        ret.published.push(LinkInfo {
            id: 27,
            title: "Getting Cozy With C++",
            url_name: "getting-cozy-cpp",
        });
        ret.published.push(LinkInfo {
            id: 28,
            title: "Getting Cozy with Ruby",
            url_name: "getting-cozy-ruby",
        });
        ret.published.push(LinkInfo {
            id: 29,
            title: "Thirty Green Squares",
            url_name: "green-squares",
        });
        ret.published.push(LinkInfo {
            id: 30,
            title: "Some Haskell, English'd",
            url_name: "haskell-english",
        });
        ret.published.push(LinkInfo {
            id: 31,
            title: "Haskell as Training Wheels",
            url_name: "haskell-training-wheels",
        });
        ret.published.push(LinkInfo {
            id: 32,
            title: "Higher-Order Functions in Rust",
            url_name: "hof-rust",
        });
        ret.published.push(LinkInfo {
            id: 33,
            title: "How I Emacs And So Can You: Packages",
            url_name: "how-i-emacs-packages",
        });
        ret.published.push(LinkInfo {
            id: 34,
            title: "Skip the Framework: Build A Simple Rust API with Hyper",
            url_name: "hyper-api",
        });
        ret.published.push(LinkInfo {
            id: 35,
            title: "Hyper Webapp Template",
            url_name: "hyper-template",
        });
        ret.published.push(LinkInfo {
            id: 36,
            title: "Learning German",
            url_name: "learning-german",
        });
        ret.published.push(LinkInfo {
            id: 37,
            title: "Validate a Credit Card Number with Functional JavaScript",
            url_name: "luhn-functional-javascript",
        });
        ret.published.push(LinkInfo {
            id: 38,
            title: "How To Make A Makefile",
            url_name: "make-a-makefile",
        });
        ret.published.push(LinkInfo {
            id: 39,
            title: "Use Multi-Stage Docker Builds For Statically-Linked Rust Binaries",
            url_name: "multi-stage-docker",
        });
        ret.published.push(LinkInfo {
            id: 40,
            title: "Oops, I'm Making A Framework",
            url_name: "oops-framework",
        });
        ret.published.push(LinkInfo {
            id: 41,
            title: "Overly Functional C++",
            url_name: "overly-functional-cpp",
        });
        ret.published.push(LinkInfo {
            id: 42,
            title: " Parser Combinators are Easy",
            url_name: "parser-combinators-easy",
        });
        ret.published.push(LinkInfo {
            id: 43,
            title: "Pass-By-Value in C++ and Rust",
            url_name: "pass-by-value-cpp-rust",
        });
        ret.published.push(LinkInfo {
            id: 44,
            title: "Pressure-Free AoC",
            url_name: "pressure-free-aoc",
        });
        ret.published.push(LinkInfo {
            id: 45,
            title: "Procedural Melody Generation in Rust",
            url_name: "procedural-melody-generation",
        });
        ret.published.push(LinkInfo {
            id: 46,
            title: "In And Out Of Rabbit Holes",
            url_name: "rabbit-holes",
        });
        ret.published.push(LinkInfo {
            id: 47,
            title: "Real-Time Communication in ReasonML with bs-socket",
            url_name: "reason-rtc",
        });
        ret.published.push(LinkInfo {
            id: 48,
            title: "I Am Mesmerized By Our New Robotic Vacuum",
            url_name: "robotic-vacuum",
        });
        ret.published.push(LinkInfo {
            id: 49,
            title: "No More Tears, No More Knots: Arena-Allocated Trees in Rust",
            url_name: "rust-arena-trees",
        });
        ret.published.push(LinkInfo {
            id: 50,
            title: "Build You A Markov Chain In Rust (Or Whatever)",
            url_name: "rust-markov",
        });
        ret.published.push(LinkInfo {
            id: 51,
            title: "Rust + ReasonML - a beginner's love story",
            url_name: "rust-reason-love",
        });
        ret.published.push(LinkInfo {
            id: 52,
            title: "Stalk a Click through a Re-Frame/actix_web App",
            url_name: "stalk-a-click",
        });
        ret.published.push(LinkInfo {
            id: 53,
            title: "Steam Proton Is Great",
            url_name: "steam-proton",
        });
        ret.published.push(LinkInfo {
            id: 54,
            title: "Stencil: I Think I Found My Frontend Home",
            url_name: "stencil-home",
        });
        ret.published.push(LinkInfo {
            id: 55,
            title: "Tail Recursion",
            url_name: "tail-recursion",
        });
        ret.published.push(LinkInfo {
            id: 56,
            title: "A Tale of Two Functions",
            url_name: "tale-two-functions",
        });
        ret.published.push(LinkInfo {
            id: 57,
            title: "Overly Functional C++: The Fold",
            url_name: "the-fold",
        });
        ret.published.push(LinkInfo {
            id: 58,
            title: "Towards Complexity",
            url_name: "towards-complexity",
        });
        ret.published.push(LinkInfo {
            id: 59,
            title: "The Value Of Your Time",
            url_name: "value-of-your-time",
        });
        ret.published.push(LinkInfo {
            id: 60,
            title: "Interesting Video Game Mechanics",
            url_name: "video-game-mechanics",
        });
        ret.published.push(LinkInfo {
            id: 61,
            title: "Let's Build a Rust Frontend with Yew - Part 1",
            url_name: "yew-1",
        });
        ret.published.push(LinkInfo {
            id: 62,
            title: "Let's Build a Rust Frontend with Yew - Part 2",
            url_name: "yew-2",
        });
        ret.published.push(LinkInfo {
            id: 63,
            title: "Let's Build a Rust Frontend with Yew - Part 3",
            url_name: "yew-3",
        });
        ret
    };
}

#[derive(Template)]
#[template(path = "post_deciduously-com.html")]
pub struct Blog18Template {
    links: &'static [Hyperlink],
}
impl Default for Blog18Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_actix-trials.html")]
pub struct Blog0Template {
    links: &'static [Hyperlink],
}
impl Default for Blog0Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_actix-wrap.html")]
pub struct Blog1Template {
    links: &'static [Hyperlink],
}
impl Default for Blog1Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_avoiding-problems.html")]
pub struct Blog2Template {
    links: &'static [Hyperlink],
}
impl Default for Blog2Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_back-to-school.html")]
pub struct Blog3Template {
    links: &'static [Hyperlink],
}
impl Default for Blog3Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_ben-folds-five.html")]
pub struct Blog4Template {
    links: &'static [Hyperlink],
}
impl Default for Blog4Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_ben-plus-plus.html")]
pub struct Blog5Template {
    links: &'static [Hyperlink],
}
impl Default for Blog5Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_board-game-mechanics.html")]
pub struct Blog6Template {
    links: &'static [Hyperlink],
}
impl Default for Blog6Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_builder-pattern.html")]
pub struct Blog7Template {
    links: &'static [Hyperlink],
}
impl Default for Blog7Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_callbacks-trait-objects-associated-types.html")]
pub struct Blog8Template {
    links: &'static [Hyperlink],
}
impl Default for Blog8Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_canvas-cljs-vue.html")]
pub struct Blog9Template {
    links: &'static [Hyperlink],
}
impl Default for Blog9Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_canvas-ts-vue.html")]
pub struct Blog10Template {
    links: &'static [Hyperlink],
}
impl Default for Blog10Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_cljs-exercise.html")]
pub struct Blog11Template {
    links: &'static [Hyperlink],
}
impl Default for Blog11Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_clojure-dorothy.html")]
pub struct Blog12Template {
    links: &'static [Hyperlink],
}
impl Default for Blog12Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_clojure-web.html")]
pub struct Blog13Template {
    links: &'static [Hyperlink],
}
impl Default for Blog13Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_cpp-template-specialization.html")]
pub struct Blog14Template {
    links: &'static [Hyperlink],
}
impl Default for Blog14Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_crates-known-loved.html")]
pub struct Blog15Template {
    links: &'static [Hyperlink],
}
impl Default for Blog15Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_creative-coding-nannou.html")]
pub struct Blog16Template {
    links: &'static [Hyperlink],
}
impl Default for Blog16Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_debian-buster.html")]
pub struct Blog17Template {
    links: &'static [Hyperlink],
}
impl Default for Blog17Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_deciduously.html")]
pub struct Blog19Template {
    links: &'static [Hyperlink],
}
impl Default for Blog19Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_dev-to-scrape-rust.html")]
pub struct Blog20Template {
    links: &'static [Hyperlink],
}
impl Default for Blog20Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_dumb-things-i-did.html")]
pub struct Blog21Template {
    links: &'static [Hyperlink],
}
impl Default for Blog21Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_fold-em.html")]
pub struct Blog22Template {
    links: &'static [Hyperlink],
}
impl Default for Blog22Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_formdata-ts.html")]
pub struct Blog23Template {
    links: &'static [Hyperlink],
}
impl Default for Blog23Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_fresh-ruby-project.html")]
pub struct Blog24Template {
    links: &'static [Hyperlink],
}
impl Default for Blog24Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_fsharp-pretty-cool.html")]
pub struct Blog25Template {
    links: &'static [Hyperlink],
}
impl Default for Blog25Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_get-started-writing-scheme.html")]
pub struct Blog26Template {
    links: &'static [Hyperlink],
}
impl Default for Blog26Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_getting-cozy-cpp.html")]
pub struct Blog27Template {
    links: &'static [Hyperlink],
}
impl Default for Blog27Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_getting-cozy-ruby.html")]
pub struct Blog28Template {
    links: &'static [Hyperlink],
}
impl Default for Blog28Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_green-squares.html")]
pub struct Blog29Template {
    links: &'static [Hyperlink],
}
impl Default for Blog29Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_haskell-english.html")]
pub struct Blog30Template {
    links: &'static [Hyperlink],
}
impl Default for Blog30Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_haskell-training-wheels.html")]
pub struct Blog31Template {
    links: &'static [Hyperlink],
}
impl Default for Blog31Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_hof-rust.html")]
pub struct Blog32Template {
    links: &'static [Hyperlink],
}
impl Default for Blog32Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_how-i-emacs-packages.html")]
pub struct Blog33Template {
    links: &'static [Hyperlink],
}
impl Default for Blog33Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_hyper-api.html")]
pub struct Blog34Template {
    links: &'static [Hyperlink],
}
impl Default for Blog34Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_hyper-template.html")]
pub struct Blog35Template {
    links: &'static [Hyperlink],
}
impl Default for Blog35Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_learning-german.html")]
pub struct Blog36Template {
    links: &'static [Hyperlink],
}
impl Default for Blog36Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_luhn-functional-javascript.html")]
pub struct Blog37Template {
    links: &'static [Hyperlink],
}
impl Default for Blog37Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_make-a-makefile.html")]
pub struct Blog38Template {
    links: &'static [Hyperlink],
}
impl Default for Blog38Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_multi-stage-docker.html")]
pub struct Blog39Template {
    links: &'static [Hyperlink],
}
impl Default for Blog39Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_oops-framework.html")]
pub struct Blog40Template {
    links: &'static [Hyperlink],
}
impl Default for Blog40Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_overly-functional-cpp.html")]
pub struct Blog41Template {
    links: &'static [Hyperlink],
}
impl Default for Blog41Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_parser-combinators-easy.html")]
pub struct Blog42Template {
    links: &'static [Hyperlink],
}
impl Default for Blog42Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_pass-by-value-cpp-rust.html")]
pub struct Blog43Template {
    links: &'static [Hyperlink],
}
impl Default for Blog43Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_pressure-free-aoc.html")]
pub struct Blog44Template {
    links: &'static [Hyperlink],
}
impl Default for Blog44Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_procedural-melody-generation.html")]
pub struct Blog45Template {
    links: &'static [Hyperlink],
}
impl Default for Blog45Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_rabbit-holes.html")]
pub struct Blog46Template {
    links: &'static [Hyperlink],
}
impl Default for Blog46Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_reason-rtc.html")]
pub struct Blog47Template {
    links: &'static [Hyperlink],
}
impl Default for Blog47Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_robotic-vacuum.html")]
pub struct Blog48Template {
    links: &'static [Hyperlink],
}
impl Default for Blog48Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_rust-arena-trees.html")]
pub struct Blog49Template {
    links: &'static [Hyperlink],
}
impl Default for Blog49Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_rust-markov.html")]
pub struct Blog50Template {
    links: &'static [Hyperlink],
}
impl Default for Blog50Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_rust-reason-love.html")]
pub struct Blog51Template {
    links: &'static [Hyperlink],
}
impl Default for Blog51Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_stalk-a-click.html")]
pub struct Blog52Template {
    links: &'static [Hyperlink],
}
impl Default for Blog52Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_steam-proton.html")]
pub struct Blog53Template {
    links: &'static [Hyperlink],
}
impl Default for Blog53Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_stencil-home.html")]
pub struct Blog54Template {
    links: &'static [Hyperlink],
}
impl Default for Blog54Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_tail-recursion.html")]
pub struct Blog55Template {
    links: &'static [Hyperlink],
}
impl Default for Blog55Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_tale-two-functions.html")]
pub struct Blog56Template {
    links: &'static [Hyperlink],
}
impl Default for Blog56Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_the-fold.html")]
pub struct Blog57Template {
    links: &'static [Hyperlink],
}
impl Default for Blog57Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_towards-complexity.html")]
pub struct Blog58Template {
    links: &'static [Hyperlink],
}
impl Default for Blog58Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_value-of-your-time.html")]
pub struct Blog59Template {
    links: &'static [Hyperlink],
}
impl Default for Blog59Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_video-game-mechanics.html")]
pub struct Blog60Template {
    links: &'static [Hyperlink],
}
impl Default for Blog60Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_yew-1.html")]
pub struct Blog61Template {
    links: &'static [Hyperlink],
}
impl Default for Blog61Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_yew-2.html")]
pub struct Blog62Template {
    links: &'static [Hyperlink],
}
impl Default for Blog62Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[derive(Template)]
#[template(path = "post_yew-3.html")]
pub struct Blog63Template {
    links: &'static [Hyperlink],
}
impl Default for Blog63Template {
    fn default() -> Self {
        Self { links: &NAV }
    }
}

#[allow(clippy::cognitive_complexity)]
pub async fn blog_handler(path_str: &str) -> HandlerResult {
    match path_str {
        "/actix-trials" => {
            html_str_handler(
                &Blog0Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/actix-wrap" => {
            html_str_handler(
                &Blog1Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/avoiding-problems" => {
            html_str_handler(
                &Blog2Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/back-to-school" => {
            html_str_handler(
                &Blog3Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/ben-folds-five" => {
            html_str_handler(
                &Blog4Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/ben-plus-plus" => {
            html_str_handler(
                &Blog5Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/board-game-mechanics" => {
            html_str_handler(
                &Blog6Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/builder-pattern" => {
            html_str_handler(
                &Blog7Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/callbacks-trait-objects-associated-types" => {
            html_str_handler(
                &Blog8Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/canvas-cljs-vue" => {
            html_str_handler(
                &Blog9Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/canvas-ts-vue" => {
            html_str_handler(
                &Blog10Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/cljs-exercise" => {
            html_str_handler(
                &Blog11Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/clojure-dorothy" => {
            html_str_handler(
                &Blog12Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/clojure-web" => {
            html_str_handler(
                &Blog13Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/cpp-template-specialization" => {
            html_str_handler(
                &Blog14Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/crates-known-loved" => {
            html_str_handler(
                &Blog15Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/creative-coding-nannou" => {
            html_str_handler(
                &Blog16Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/debian-buster" => {
            html_str_handler(
                &Blog17Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/deciduously" => {
            html_str_handler(
                &Blog19Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/dev-to-scrape-rust" => {
            html_str_handler(
                &Blog20Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/dumb-things-i-did" => {
            html_str_handler(
                &Blog21Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/fold-em" => {
            html_str_handler(
                &Blog22Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/formdata-ts" => {
            html_str_handler(
                &Blog23Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/fresh-ruby-project" => {
            html_str_handler(
                &Blog24Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/fsharp-pretty-cool" => {
            html_str_handler(
                &Blog25Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/get-started-writing-scheme" => {
            html_str_handler(
                &Blog26Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/getting-cozy-cpp" => {
            html_str_handler(
                &Blog27Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/getting-cozy-ruby" => {
            html_str_handler(
                &Blog28Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/green-squares" => {
            html_str_handler(
                &Blog29Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/haskell-english" => {
            html_str_handler(
                &Blog30Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/haskell-training-wheels" => {
            html_str_handler(
                &Blog31Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/hof-rust" => {
            html_str_handler(
                &Blog32Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/how-i-emacs-packages" => {
            html_str_handler(
                &Blog33Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/hyper-api" => {
            html_str_handler(
                &Blog34Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/hyper-template" => {
            html_str_handler(
                &Blog35Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/learning-german" => {
            html_str_handler(
                &Blog36Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/luhn-functional-javascript" => {
            html_str_handler(
                &Blog37Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/make-a-makefile" => {
            html_str_handler(
                &Blog38Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/multi-stage-docker" => {
            html_str_handler(
                &Blog39Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/oops-framework" => {
            html_str_handler(
                &Blog40Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/overly-functional-cpp" => {
            html_str_handler(
                &Blog41Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/parser-combinators-easy" => {
            html_str_handler(
                &Blog42Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/pass-by-value-cpp-rust" => {
            html_str_handler(
                &Blog43Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/pressure-free-aoc" => {
            html_str_handler(
                &Blog44Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/procedural-melody-generation" => {
            html_str_handler(
                &Blog45Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/rabbit-holes" => {
            html_str_handler(
                &Blog46Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/reason-rtc" => {
            html_str_handler(
                &Blog47Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/robotic-vacuum" => {
            html_str_handler(
                &Blog48Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/rust-arena-trees" => {
            html_str_handler(
                &Blog49Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/rust-markov" => {
            html_str_handler(
                &Blog50Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/rust-reason-love" => {
            html_str_handler(
                &Blog51Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/stalk-a-click" => {
            html_str_handler(
                &Blog52Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/steam-proton" => {
            html_str_handler(
                &Blog53Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/stencil-home" => {
            html_str_handler(
                &Blog54Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/tail-recursion" => {
            html_str_handler(
                &Blog55Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/tale-two-functions" => {
            html_str_handler(
                &Blog56Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/the-fold" => {
            html_str_handler(
                &Blog57Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/towards-complexity" => {
            html_str_handler(
                &Blog58Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/value-of-your-time" => {
            html_str_handler(
                &Blog59Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/video-game-mechanics" => {
            html_str_handler(
                &Blog60Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/yew-1" => {
            html_str_handler(
                &Blog61Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/yew-2" => {
            html_str_handler(
                &Blog62Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/yew-3" => {
            html_str_handler(
                &Blog63Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        "/deciduously-com" => {
            html_str_handler(
                &Blog18Template::default()
                    .render()
                    .expect("Should render markup")
            )
            .await
        }
        _ => four_oh_four().await,
    }
}
